buildscript {
    repositories {
        maven {
            url "https://sgeb.github.io/maven_repo/"
        }
    }

    dependencies {
        classpath "me.sgeb.gradle.plugins:gradle-android-arm-clang-plugin:0.+"
        classpath "me.sgeb.gradle:gradle-native-artifacts-plugin:1.1.0-SNAPSHOT"
    }
}

apply plugin: 'cpp'
apply plugin: 'android-arm-clang'
apply plugin: 'native-artifacts'
apply plugin: 'ivy-publish'

group "com.github.opencash"
version "0.1.0"
status "integration"

repositories {
    ivy {
        url "https://opencash.github.io/ivy_repo/"
    }
}

model {
    platforms {
        "osx-x86_64" {
            operatingSystem "osx"
            architecture "x86_64"
        }

        /* "linux-amd64" { */
        /*     operatingSystem "linux" */
        /*     architecture "amd64" */
        /* } */

        "android-arm" {
            operatingSystem "linux"
            architecture "arm"
        }
    }

    buildTypes {
        debug
        release
    }
}

libraries.all { ext.purpose = null }
libraries {
    opencash {
        binaries.all { binary ->
            cppCompiler.args '-I', "$projectDir/src/core/generated" // TODO: ugly hack for relative includes, needs fixing!
        }
    }
}

executables.all { ext.purpose = null }
executables {
    TestAccount {
        purpose = 'test'
    }

    TestDocumentController {
        purpose = 'test'
    }

    all {
        binaries.all { binary ->
            targetBuildTypes "debug"

            lib libraries.opencash.static

            def myPlatform = binary.targetPlatform.name
            project.dependencies {
                add binary.narConfName,
                    [group: "com.github.opencash.vendor", name: "gtest",
                        version: "1.7.0", configuration: myPlatform]

                add binary.narConfName,
                    [group: "com.github.opencash.vendor", name: "gmock",
                        version: "1.7.0", configuration: myPlatform]
            }

            cppCompiler.args '-I', "$projectDir/src" // TODO: ugly hack for relative includes, needs fixing!

            linker.args '-lgtest'
            linker.args '-lgtest_main'
            linker.args '-lgmock'
            linker.args '-lgmock_main'
            linker.args '-lPocoFoundation'
            linker.args '-lodb-sqlite'
            linker.args '-lodb'
            linker.args '-lsqlite3'
        }
    }
}

sources {
    opencash {
        cpp {
            source {
                srcDir "src"
                include "**/*.cpp"
                include "**/*.cxx"
            }
            exportedHeaders {
                srcDir "include"
            }
        }
    }

    TestAccount {
        cpp {
            source {
                srcDir "test"
                include "TestAccount.cpp"
            }
            exportedHeaders {
                srcDir "include"
            }
        }
    }

    TestDocumentController {
        cpp {
            source {
                srcDir "test"
                include "TestDocumentController.cpp"
            }
            exportedHeaders {
                srcDir "include"
            }
        }
    }
}

binaries.all { binary ->
    def myPlatform = binary.targetPlatform.name
    project.dependencies {
        add binary.narConfName,
            [group: "com.github.opencash.vendor", name: "poco",
                version: "1.5.2", configuration: myPlatform]

        add binary.narConfName,
            [group: "com.github.opencash.vendor", name: "libodb",
                version: "2.3.0", configuration: myPlatform]

        add binary.narConfName,
            [group: "com.github.opencash.vendor", name: "libodb-sqlite",
                version: "2.3.0", configuration: myPlatform]
    }

    if (toolChain in Gcc || toolChain in Clang) {
        cppCompiler.args "-std=c++11"
        cppCompiler.args "-I${binary.narDepsDir}/include"

        if (targetPlatform.operatingSystem.isMacOsX()) {
            cppCompiler.args "-stdlib=libc++"
            linker.args "-stdlib=libc++"
        }

        if (buildType == buildTypes.debug) {
            cppCompiler.args "-g"
        }

        if (buildType == buildTypes.release) {
            cppCompiler.args "-O2"
        }

        linker.args "-L${binary.narDepsDir}/lib"
    }
}

task build {
    description "Builds all binaries on all buildable platforms (except shared libs)."
    dependsOn binaries.matching { it.buildable && !(it instanceof SharedLibraryBinary) }
}

task test {
    description "Builds and runs all tests for current platform."

    def testExecutables = binaries.withType(ExecutableBinary).matching {
        it.component.purpose == "test" &&
            it.targetPlatform.operatingSystem.current &&
            it.targetPlatform.architecture.name == System.properties['os.arch']
    }

    dependsOn testExecutables

    doLast {
        testExecutables.all { test ->
            exec { commandLine test.executableFile }
        }
    }
}

task wrapper(type: Wrapper) {
    description 'Updates the wrapper'
    gradleVersion = '1.11'
}

defaultTasks("tasks")
