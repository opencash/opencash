// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MANAGED_OBJECT_ODB_HXX
#define MANAGED_OBJECT_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include <opencash/core/ManagedObject.h>

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // ManagedObject
  //
  template <>
  struct class_traits< ::opencash::core::ManagedObject >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::opencash::core::ManagedObject >
  {
    public:
    typedef ::opencash::core::ManagedObject object_type;
    typedef ::opencash::core::ManagedObject* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::opencash::core::ManagedObject::Uuid id_type;

    static const bool auto_id = false;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // ManagedObject
  //
  template <typename A>
  struct query_columns< ::opencash::core::ManagedObject, id_sqlite, A >
  {
    // uuid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::opencash::core::ManagedObject::Uuid,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    uuid_type_;

    static const uuid_type_ uuid;
  };

  template <typename A>
  const typename query_columns< ::opencash::core::ManagedObject, id_sqlite, A >::uuid_type_
  query_columns< ::opencash::core::ManagedObject, id_sqlite, A >::
  uuid (A::table_name, "\"uuid\"", 0);

  template <typename A>
  struct pointer_query_columns< ::opencash::core::ManagedObject, id_sqlite, A >:
    query_columns< ::opencash::core::ManagedObject, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >:
    public access::object_traits< ::opencash::core::ManagedObject >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _uuid
      //
      details::buffer _uuid_value;
      std::size_t _uuid_size;
      bool _uuid_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // ManagedObject
  //
}

#include <ManagedObject-odb.ixx>

#include <odb/post.hxx>

#endif // MANAGED_OBJECT_ODB_HXX
