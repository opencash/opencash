// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <ManagedObject-odb.hxx>

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // ManagedObject
  //

  access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::id_type
  access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::opencash::core::ManagedObject::Uuid,
          sqlite::id_text >::set_value (
        id,
        i._uuid_value,
        i._uuid_size,
        i._uuid_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // _uuid
    //
    if (t[0UL])
    {
      i._uuid_value.capacity (i._uuid_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // _uuid
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::opencash::core::ManagedObject::Uuid,
        sqlite::id_text>::bind_value;
      b[n].buffer = i._uuid_value.data ();
      b[n].size = &i._uuid_size;
      b[n].capacity = i._uuid_value.capacity ();
      b[n].is_null = &i._uuid_null;
      n++;
    }
  }

  void access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::image_traits<
      ::opencash::core::ManagedObject::Uuid,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.id_value.data ();
    b[n].size = &i.id_size;
    b[n].capacity = i.id_value.capacity ();
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // _uuid
    //
    if (sk == statement_insert)
    {
      ::opencash::core::ManagedObject::Uuid const& v =
        o._uuid;

      bool is_null (false);
      std::size_t cap (i._uuid_value.capacity ());
      sqlite::value_traits<
          ::opencash::core::ManagedObject::Uuid,
          sqlite::id_text >::set_image (
        i._uuid_value,
        i._uuid_size,
        is_null,
        v);
      i._uuid_null = is_null;
      grew = grew || (cap != i._uuid_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // _uuid
    //
    {
      // From ManagedObject.h:26:21
      ::opencash::core::ManagedObject::Uuid v;

      sqlite::value_traits<
          ::opencash::core::ManagedObject::Uuid,
          sqlite::id_text >::set_value (
        v,
        i._uuid_value,
        i._uuid_size,
        i._uuid_null);

      // From ManagedObject.h:26:21
      o.setUuid (v);
    }
  }

  void access::object_traits_impl< ::opencash::core::ManagedObject, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::opencash::core::ManagedObject::Uuid,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        id);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }
}

#include <odb/post.hxx>
